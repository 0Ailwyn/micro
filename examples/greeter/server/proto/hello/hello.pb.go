// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package go_micro_srv_greeter is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	Request
	Response
*/
package go_micro_srv_greeter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Request struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Request)(nil), "go.micro.srv.greeter.Request")
	proto.RegisterType((*Response)(nil), "go.micro.srv.greeter.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Say service

type SayClient interface {
	Hello(ctx context.Context, in *Request) (*Response, error)
}

type sayClient struct {
	c client.Client
}

func NewSayClient(c client.Client) SayClient {
	if c == nil {
		c = client.NewClient()
	}
	return &sayClient{
		c: c,
	}
}

func (c *sayClient) Hello(ctx context.Context, in *Request) (*Response, error) {
	req := c.c.NewRequest("go.micro.srv.greeter", "Say.Hello", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Say service

type SayServer interface {
	Hello(context.Context, *Request, *Response) error
}

func RegisterSayServer(s server.Server, srv SayServer) {
	s.Handle(s.NewHandler(srv))
}

var fileDescriptor0 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x49, 0xcf, 0xd7, 0xcb, 0xcd, 0x4c, 0x2e,
	0xca, 0xd7, 0x2b, 0x2e, 0x2a, 0xd3, 0x4b, 0x2f, 0x4a, 0x4d, 0x2d, 0x49, 0x2d, 0x52, 0x12, 0xe7,
	0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe1, 0x62, 0xc9, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x04, 0x4a, 0x70, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x0a, 0x71, 0x73, 0x31, 0xe7, 0x16, 0xa7, 0x43, 0x24, 0x8c, 0xfc, 0xb9, 0x98, 0x83, 0x13,
	0x2b, 0x85, 0x3c, 0xb8, 0x58, 0x3d, 0x40, 0xa6, 0x0b, 0xc9, 0xea, 0x61, 0x33, 0x58, 0x0f, 0x6a,
	0xaa, 0x94, 0x1c, 0x2e, 0x69, 0x88, 0xd9, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0xf7, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x0d, 0x63, 0x1b, 0x55, 0xae, 0x00, 0x00, 0x00,
}
